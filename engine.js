
// (engine.js content was built in the previous step; using the same as described.)
export function mondayOf(date){const d=new Date(date);const day=(d.getDay()+6)%7;d.setDate(d.getDate()-day);d.setHours(0,0,0,0);return d;}
export function addDays(d,n){const x=new Date(d);x.setDate(x.getDate()+n);return x;}
function isInWeek(d,weekStart){const start=new Date(weekStart);const end=addDays(start,7);return d>=start&&d<end;}
function applyOvertimeForDay(hours,rules,base){let gross=0;let remaining=hours;const daily=(rules.daily||[]).slice().sort((a,b)=>a.threshold-b.threshold);let prev=0;for(const seg of daily){const span=Math.max(0,Math.min(hours,seg.threshold)-prev);if(span>0){gross+=span*base*(seg.multiplier||1);prev=seg.threshold;remaining=hours-prev;}}const lastMul=daily.length?daily[daily.length-1].multiplier:1;if(remaining>0){gross+=remaining*base*(rules.dailyAboveMultiplier||lastMul||1);}return gross;}
function summarizeHours(weekDays){const days=weekDays||[0,0,0,0,0,0,0];const total=days.reduce((a,b)=>a+Number(b||0),0);return{days,total};}
export function computeWeekPay(weekDays,pr){const base=pr.baseHourly||20;const wh=pr.withholdingRatio??0.2;const schema=pr.schema||'federal';let rules;if(schema==='federal'){rules={weekly:{threshold:40,multiplier:1.5},daily:[]};}else if(schema==='california'){rules={weekly:{threshold:40,multiplier:1.5},daily:[{threshold:8,multiplier:1},{threshold:12,multiplier:1.5}],dailyAboveMultiplier:2.0,caDoubleAfter:12,caSeventh:true};}else if(schema==='alaska'){rules={weekly:{threshold:40,multiplier:1.5},daily:[{threshold:8,multiplier:1}],dailyAboveMultiplier:1.5};}else if(schema==='colorado'){rules={weekly:{threshold:40,multiplier:1.5},daily:[{threshold:12,multiplier:1}],dailyAboveMultiplier:1.5};}else if(schema==='nevada'){rules={weekly:{threshold:40,multiplier:1.5},daily:pr.nvDaily8?[{threshold:8,multiplier:1}]:[],dailyAboveMultiplier:1.5};}else if(schema==='custom'){rules={weekly:pr.custom?.weekly||{threshold:40,multiplier:1.5},daily:pr.custom?.daily||[],dailyAboveMultiplier:pr.custom?.dailyAboveMultiplier||1.5};}else{rules={weekly:{threshold:40,multiplier:1.5},daily:[]};}
const {days,total}=summarizeHours(weekDays);let dailyGross=0;for(let i=0;i<7;i++){const h=Number(days[i]||0);if(h<=0)continue;const dGross=applyOvertimeForDay(h,rules,base);dailyGross+=dGross;}const weeklyExcess=Math.max(0,total-(rules.weekly?.threshold??40));const weeklyOT=weeklyExcess*base*((rules.weekly?.multiplier??1.5)-1);let gross=dailyGross+weeklyOT;const net=gross*(1-(wh));return{gross:Math.round(gross*100)/100,net:Math.round(net*100)/100,totalHours:total};}
export function project(state){const start=mondayOf(new Date());const weeks=Array.from({length:12},(_,i)=>({weekStart:addDays(start,i*7),inflows:0,mustPays:0,variables:0,splurge:state.user.splurgePerWeek||0,freeToSpend:0,}));for(const t of state.timesheets||[]){const ws=mondayOf(t.weekStart);const idx=Math.floor((ws-start)/(7*24*3600*1000));if(idx>=0&&idx<12){const pr=state.payRules||{baseHourly:20,withholdingRatio:0.2,schema:'federal'};const days=t.days||[0,0,0,0,0,0,0];const pay=computeWeekPay(days,pr);weeks[idx].inflows+=pay.net;}}for(const bill of state.bills||[]){for(let i=0;i<12;i++){const w=weeks[i];const weekStart=new Date(w.weekStart);for(let mOff=0;mOff<3;mOff++){const due=new Date(weekStart.getFullYear(),weekStart.getMonth()+mOff,bill.dueDay);if(isInWeek(due,weekStart))w.mustPays+=Number(bill.amount||0);}}}for(const loan of state.loans||[]){for(let i=0;i<12;i++){const w=weeks[i];const weekStart=new Date(w.weekStart);for(let mOff=0;mOff<3;mOff++){const due=new Date(weekStart.getFullYear(),weekStart.getMonth()+mOff,loan.dueDay);if(isInWeek(due,weekStart))w.mustPays+=Number(loan.minimumPayment||0);}}}const varsWeekly=(state.envelopes||[]).reduce((s,e)=>s+Number(e.weeklyTarget||0),0);for(const w of weeks)w.variables+=varsWeekly;for(const ev of state.events||[]){const d=mondayOf(ev.date);const idx=Math.floor((d-start)/(7*24*3600*1000));if(idx>=0&&idx<12){if(ev.type==='income')weeks[idx].inflows+=Number(ev.amount||0);if(ev.type==='discretionary')weeks[idx].mustPays+=Number(ev.amount||0);}}for(const w of weeks){const out=w.mustPays+w.variables+w.splurge;w.freeToSpend=Math.round((w.inflows-out)*100)/100;}return weeks;}
export function monthlyReality(state){const today=new Date();const monthStart=new Date(today.getFullYear(),today.getMonth(),1);const monthEnd=new Date(today.getFullYear(),today.getMonth()+1,1);const weeks=project(state);let inflows=0,must=0,vars=0,splurge=0;for(const w of weeks){const ws=new Date(w.weekStart);if(ws>=monthStart&&ws<monthEnd){inflows+=w.inflows;must+=w.mustPays;vars+=w.variables;splurge+=w.splurge;}}const monthNeed=must+vars+splurge;let earned=0;const pr=state.payRules||{baseHourly:20,withholdingRatio:0.2,schema:'federal'};for(const t of state.timesheets||[]){const d=new Date(t.weekStart);if(d>=monthStart&&d<monthEnd){const pay=computeWeekPay(t.days||[],pr);earned+=pay.net;}}const shortfall=Math.max(0,Math.round((monthNeed-earned)*100)/100);const effectiveNetRate=(pr.baseHourly||20)*(1-(pr.withholdingRatio??0.2));const hoursNeeded=shortfall>0?Math.ceil(shortfall/effectiveNetRate):0;let weeksLeft=0;for(const w of weeks){const ws=new Date(w.weekStart);if(ws>=today&&ws<monthEnd)weeksLeft++;}weeksLeft=Math.max(1,weeksLeft);const perWeek=shortfall>0?Math.ceil(hoursNeeded/weeksLeft):0;return{monthNeed:Math.round(monthNeed*100)/100,earned:Math.round(earned*100)/100,shortfall,hoursNeeded,weeksLeft,perWeek};}
